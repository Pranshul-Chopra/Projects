import sqlite3
import bcrypt
import uuid
import time
import turtle

# --------------------- DATABASE AUTH SYSTEM ---------------------

DB_NAME = "secure_users.db"
SESSION_LIFETIME = 3600  # 1 hour

special_chars = "!@#$%^&*()-_=+[]{};:',.<>?/\\|"

def check_password_strength(password: str) -> str:
    has_letter = any(char.isalpha() for char in password)
    has_digit = any(char.isdigit() for char in password)
    has_special = any(char in special_chars for char in password)

    if len(password) < 8:
        return "Too Short"
    elif has_letter and has_digit and has_special:
        return "Strong"
    elif has_letter and has_digit:
        return "Moderate"
    elif has_letter:
        return "Weak"
    else:
        return "Invalid"

def create_tables():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash BLOB NOT NULL
        )
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS session (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            token TEXT UNIQUE NOT NULL,
            created_at INTEGER NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
        """)
        conn.commit()

def register_user(username: str, password: str) -> str:
    strength = check_password_strength(password)
    if strength in ["Too Short", "Invalid"]:
        return f"‚ùå Password strength: {strength}. Try again."

    hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())

    try:
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, hashed_pw))
            conn.commit()
        return f"‚úÖ User '{username}' registered successfully ({strength} password)."
    except sqlite3.IntegrityError:
        return f"‚ùå Username '{username}' already exists."

def login_user(username: str, password: str):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, password_hash FROM users WHERE username = ?", (username,))
        result = cursor.fetchone()

        if result:
            user_id, stored_hash = result
            if bcrypt.checkpw(password.encode(), stored_hash):
                token = str(uuid.uuid4())
                now = int(time.time())
                cursor.execute("INSERT INTO session (user_id, token, created_at) VALUES (?, ?, ?)", (user_id, token, now))
                conn.commit()
                return True, f"‚úÖ Login successful! Welcome, {username}.", token
    return False, "‚ùå Invalid username or password.", None

def logout_user(token: str) -> str:
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM session WHERE token = ?", (token,))
        conn.commit()
    return "‚úÖ Logged out successfully."

def get_logged_in_user(token: str):
    now = int(time.time())
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT u.username, s.created_at FROM users u
            JOIN session s ON u.id = s.user_id
            WHERE s.token = ?
        """, (token,))
        result = cursor.fetchone()

        if result:
            username, created_at = result
            if now - created_at <= SESSION_LIFETIME:
                return username
            else:
                cursor.execute("DELETE FROM session WHERE token = ?", (token,))
                conn.commit()
    return None

# --------------------- HEART DRAWING ---------------------
def draw_heart():
    screen = turtle.Screen()
    screen.bgcolor("white")

    pen = turtle.Turtle()
    pen.color("red")
    pen.pensize(3)
    pen.speed(1)

    pen.begin_fill()
    pen.left(140)
    pen.forward(180)
    pen.circle(-90, 200)
    pen.left(120)
    pen.circle(-90, 200)
    pen.forward(180)
    pen.end_fill()

    pen.hideturtle()
    turtle.done()

# --------------------- CHAT MODERATION ---------------------

moderation_data = {
    "forbidden_words": {
        "bad","ugly","stupid","idiot","hate","nerd","kill","fuck","dumb","bitch","gay",
        "moron","loser","fool","trash","noob","weak","jerk","retard","psycho","crazy",
        "bastard","slut","whore","asshole","cunt","dick","cock","pussy","faggot","tranny",
        "cringe","simp","beta","coward","fatass","pig","clown","degenerate","worthless","pathetic"
    },
    "harmful_phrases": {
        "kill you","kill him","kill her","kill them",
        "commit suicide","i want to die","i will die",
        "rape her","rape him",
        "shoot you","stab you","hang myself","blow him up","plant bomb"
    }
}

forbidden_words = moderation_data["forbidden_words"]
harmful_phrases = moderation_data["harmful_phrases"]

def censor_message(message: str) -> str:
    return " ".join(["*"*len(w) if w.lower() in forbidden_words else w for w in message.split()])

def ai_moderator(message: str) -> str:
    msg = message.lower()
    for phrase in harmful_phrases:
        if phrase in msg:
            return "üö® GPT: Harmful / Dangerous Context"
    if any(word in msg for word in forbidden_words):
        return "‚ö†Ô∏è GPT: Offensive / Toxic Language"
    return "‚úÖ GPT: Safe"

def chat_system():
    chat_history = []
    print("\nüí¨ Chat Moderation (AI + Censorship). Type 'back' to return.\n")

    while True:
        msg = input("Enter message: ")
        if msg.lower() == "back":
            break

        censored = censor_message(msg)
        ai_check = ai_moderator(msg)

        if "GPT: Harmful" in ai_check or "GPT: Offensive" in ai_check:
            display_msg = censored
        else:
            display_msg = msg

        chat_history.append(f"{display_msg} [{ai_check}]")

        print("\n--- Chat History ---")
        for line in chat_history:
            print(line)
        print("--------------------\n")

# --------------------- JEE RANK PREDICTOR ---------------------

tnos = 1500000
def jee_rank_predictor():
    try:
        a = int(input("Attempts (0-3): "))
        if not (0 <= a <= 3): return print("‚ùå Invalid attempts.")
        p = float(input("Percentile (0-100): "))
        if not (0 <= p <= 100): return print("‚ùå Invalid percentile.")
        c = input("Caste (Gen/Sc/Pwd): ").strip().lower()
        g = input("Gender (Male/Female): ").strip().lower()
        c = 1 if c == "gen" else 2
        g = 1 if g == "male" else 2

        rank_formula = a + g + c
        L = p * tnos 
        M = L / 100
        rank = tnos - p * rank_formula - M + 10000

        print(f"üéØ Estimated Rank: {int(rank):,}")
    except ValueError:
        print("‚ùå Invalid input.")

# --------------------- MAIN MENU ---------------------

def main_menu():
    create_tables()
    current_token = None

    while True:
        if current_token:
            user = get_logged_in_user(current_token)
            if user:
                print(f"\n==== MAIN MENU ({user}) ====")
                print("1. Chat System")
                print("2. JEE Rank Predictor")
                print("3. Draw Heart üíñ")
                print("4. Logout")
                print("5. Exit")
                choice = input("Choose: ")

                if choice == "1":
                    chat_system()
                elif choice == "2":
                    jee_rank_predictor()
                elif choice == "3":
                    draw_heart()
                elif choice == "4":
                    print(logout_user(current_token))
                    current_token = None
                elif choice == "5":
                    print("üëã Exiting program...")
                    break
                else:
                    print("‚ùå Invalid choice.")
            else:
                print("‚ö†Ô∏è Session expired. Please log in again.")
                current_token = None
        else:
            print("\n==== LOGIN SYSTEM ====")
            print("1. Register")
            print("2. Login")
            print("3. Exit")
            choice = input("Choose: ")

            if choice == "1":
                u = input("Enter username: ")
                p = input("Enter password: ")
                print(register_user(u, p))
            elif choice == "2":
                u = input("Username: ")
                p = input("Password: ")
                success, msg, token = login_user(u, p)
                print(msg)
                if success:
                    current_token = token
            elif choice == "3":
                print("üëã Goodbye!")
                break
            else:
                print("‚ùå Invalid choice.")

if __name__ == "__main__":
    main_menu()
